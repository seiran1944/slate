<!DOCTYPE html>
<html>
    <head>
        <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
        <meta charset="utf-8">
        <title>Complex Polylines</title>
        <style>
            html, body, #map-canvas {
                height: 100%;
                margin: 0px;
                padding: 0px
            }

            .controls {
                margin-top: 16px;
                border: 1px solid transparent;
                border-radius: 2px 0 0 2px;
                box-sizing: border-box;
                -moz-box-sizing: border-box;
                height: 32px;
                outline: none;
                box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
            }

            #pac-input {
                background-color: #fff;
                padding: 0 11px 0 13px;
                width: 400px;
                font-family: Roboto;
                font-size: 15px;
                font-weight: 300;
                text-overflow: ellipsis;
            }

            #pac-input:focus {
                border-color: #4d90fe;
                margin-left: -1px;
                padding-left: 14px;  /* Regular padding-left + 1. */
                width: 401px;
            }

            .pac-container {
                font-family: Roboto;
            }

            #type-selector {
                color: #fff;
                background-color: #4d90fe;
                padding: 5px 11px 0px 11px;
            }

            #type-selector label {
                font-family: Roboto;
                font-size: 13px;
                font-weight: 300;
            }
        </style>
        <script src="https://maps.googleapis.com/maps/api/js?v=3.exp"></script>
        <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places"></script>
        <script>
            // This example creates an interactive map which constructs a
            // polyline based on user clicks. Note that the polyline only appears
            // once its path property contains two LatLng coordinates.

            var poly;
            var map;

            var verticesLatLngs = [];//for vertices

            function initialize() {
                var mapOptions = {
                    zoom: 6,
                    // Center the map on Chicago, USA.
                    center: new google.maps.LatLng(41.879535, -87.624333)
                };

                map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

                var polyOptions = {
                    strokeColor: '#000000',
                    strokeOpacity: 1.0,
                    strokeWeight: 3
                };
                poly = new google.maps.Polyline(polyOptions);
                poly.setMap(map);

                //poly
                // Add a listener for the click event
                google.maps.event.addListener(map, 'click', addLatLng);


                //=============================================search box
                // Create the search box and link it to the UI element.
                var markers = [];
                var input = /** @type {HTMLInputElement} */(
                        document.getElementById('pac-input'));
                map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

                var searchBox = new google.maps.places.SearchBox(
                        /** @type {HTMLInputElement} */(input));

                // [START region_getplaces]
                // Listen for the event fired when the user selects an item from the
                // pick list. Retrieve the matching places for that item.
                google.maps.event.addListener(searchBox, 'places_changed', function() {
                    var places = searchBox.getPlaces();

                    if (places.length == 0) {
                        return;
                    }
                    for (var i = 0, marker; marker = markers[i]; i++) {
                        marker.setMap(null);
                    }

                    // For each place, get the icon, place name, and location.
                    markers = [];
                    var bounds = new google.maps.LatLngBounds();
                    for (var i = 0, place; place = places[i]; i++) {
                        var image = {
                            url: place.icon,
                            size: new google.maps.Size(71, 71),
                            origin: new google.maps.Point(0, 0),
                            anchor: new google.maps.Point(17, 34),
                            scaledSize: new google.maps.Size(25, 25)
                        };

                        // Create a marker for each place.
                        var marker = new google.maps.Marker({
                            map: map,
                            icon: image,
                            title: place.name,
                            position: place.geometry.location
                        });

                        markers.push(marker);

                        bounds.extend(place.geometry.location);
                    }
                    map.fitBounds(bounds);
                });
                //===================================END=======search box
            }

            /**
             * Handles click events on a map, and adds a new point to the Polyline.
             * @param {google.maps.MouseEvent} event
             */
            function addLatLng(event) {

                var path = poly.getPath();

                // Because path is an MVCArray, we can simply append a new coordinate
                // and it will automatically appear.
                path.push(event.latLng);

                // Add a new marker at the new plotted point on the polyline.
                var marker = new google.maps.Marker({
                    position: event.latLng,
                    title: '#' + path.getLength(),
                    map: map
                });

                verticesLatLngs.push({latlng:event.latLng, marker:marker});
                //for test
                /*alert(typeof(event.latLng));
                for( var index in event.latLng ){
                    alert(index + ' : ' +event.latLng[index]);
                }*/
            }

            //==================================================draw area
            function drawArea(){
                if(verticesLatLngs.length < 3){
                    alert('vertices less than 3 !!');
                }

                var areaCoords = [];
                var currentCoords = null;
                for(var i in verticesLatLngs){
                    currentCoords = verticesLatLngs[i];
                    areaCoords.push( new google.maps.LatLng( currentCoords.latlng.k , currentCoords.latlng.B ) );
                    //alert(currentCoords.k + ' : ' + currentCoords.B);
                    showPos( currentCoords.marker, i, currentCoords.latlng.k, currentCoords.latlng.B );
                }

                // Construct the polygon.
                var areaPolygon = new google.maps.Polygon({
                    paths: areaCoords,
                    strokeColor: '#FF0000',
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: '#FF0000',
                    fillOpacity: 0.35
                });

                areaPolygon.setMap(map);
            }
            //================================END===============draw area


            //==================================================SHOW POSITION
            function showPos( marker , count , Lat, Lng ){
                var contentString = '[' + count + '] : ' + Lat + ' , ' + Lng

                var infowindow = new google.maps.InfoWindow({
                    content: contentString
                });

                infowindow.open(map,marker);
            }

            //==================================end=============SHOW POSITION



            google.maps.event.addDomListener(window, 'load', initialize);

            //for searchbox
            // Bias the SearchBox results towards places that are within the bounds of the
            // current map's viewport.
            google.maps.event.addListener(map, 'bounds_changed', function() {
                var bounds = map.getBounds();
                searchBox.setBounds(bounds);
            });

        </script>
    </head>

    <body>
        <input type='button' id='Confirm' value='Confirm' onclick='drawArea();' />
        <br>
        <input id="pac-input" class="controls" type="text" placeholder="Search Box">
        <div id="map-canvas"></div>
    </body>

</html>